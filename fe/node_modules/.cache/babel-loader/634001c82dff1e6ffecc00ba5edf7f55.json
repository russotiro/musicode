{"ast":null,"code":"function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n/**\n * React Router Native v6.9.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { TouchableHighlight, BackHandler, Linking } from 'react-native';\nimport { MemoryRouter, useNavigate, useLocation } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, RouterProvider, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, renderMatches, resolvePath, unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport URLSearchParams from '@ungap/url-search-params';\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nvar _excluded = [\"onPress\", \"relative\", \"replace\", \"state\", \"to\"];\nfunction NativeRouter(props) {\n  return React.createElement(MemoryRouter, Object.assign({}, props));\n}\nfunction Link(_ref) {\n  var onPress = _ref.onPress,\n    relative = _ref.relative,\n    _ref$replace = _ref.replace,\n    replace = _ref$replace === void 0 ? false : _ref$replace,\n    state = _ref.state,\n    to = _ref.to,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var internalOnPress = useLinkPressHandler(to, {\n    replace: replace,\n    state: state,\n    relative: relative\n  });\n  function handlePress(event) {\n    if (onPress) onPress(event);\n    if (!event.defaultPrevented) {\n      internalOnPress(event);\n    }\n  }\n  return React.createElement(TouchableHighlight, Object.assign({}, rest, {\n    onPress: handlePress\n  }));\n}\nvar HardwareBackPressEventType = \"hardwareBackPress\";\nvar URLEventType = \"url\";\nfunction useLinkPressHandler(to) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    replace = _ref2.replace,\n    state = _ref2.state,\n    relative = _ref2.relative;\n  var navigate = useNavigate();\n  return function handlePress() {\n    navigate(to, {\n      replace: replace,\n      state: state,\n      relative: relative\n    });\n  };\n}\nfunction useHardwareBackButton() {\n  React.useEffect(function () {\n    function handleHardwardBackPress() {\n      return undefined;\n    }\n    BackHandler.addEventListener(HardwareBackPressEventType, handleHardwardBackPress);\n    return function () {\n      BackHandler.removeEventListener(HardwareBackPressEventType, handleHardwardBackPress);\n    };\n  }, []);\n}\nfunction useDeepLinking() {\n  var navigate = useNavigate();\n  React.useEffect(function () {\n    var current = true;\n    Linking.getInitialURL().then(function (url) {\n      if (current) {\n        if (url) navigate(trimScheme(url));\n      }\n    });\n    return function () {\n      current = false;\n    };\n  }, [navigate]);\n  React.useEffect(function () {\n    function handleURLChange(event) {\n      navigate(trimScheme(event.url));\n    }\n    Linking.addEventListener(URLEventType, handleURLChange);\n    return function () {\n      Linking.removeEventListener(URLEventType, handleURLChange);\n    };\n  }, [navigate]);\n}\nfunction trimScheme(url) {\n  return url.replace(/^.*?:\\/\\//, \"\");\n}\nfunction useSearchParams(defaultInit) {\n  var defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  var hasSetSearchParamsRef = React.useRef(false);\n  var location = useLocation();\n  var searchParams = React.useMemo(function () {\n    var searchParams = createSearchParams(location.search);\n    if (!hasSetSearchParamsRef.current) {\n      var _loop = function _loop(key) {\n        if (!searchParams.has(key)) {\n          defaultSearchParamsRef.current.getAll(key).forEach(function (value) {\n            searchParams.append(key, value);\n          });\n        }\n      };\n      var _iterator = _createForOfIteratorHelper(defaultSearchParamsRef.current.keys()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var key = _step.value;\n          _loop(key);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return searchParams;\n  }, [location.search]);\n  var navigate = useNavigate();\n  var setSearchParams = React.useCallback(function (nextInit, navigateOpts) {\n    var newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOpts);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\nfunction createSearchParams() {\n  var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce(function (memo, key) {\n    var value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(function (v) {\n      return [key, v];\n    }) : [[key, value]]);\n  }, []));\n}\nexport { Link, NativeRouter, createSearchParams, useHardwareBackButton as useAndroidBackButton, useDeepLinking, useHardwareBackButton, useLinkPressHandler, useSearchParams };","map":null,"metadata":{},"sourceType":"module"}